# Default values for veidemann.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

tags:
  database: true
  database-backup: false
  idp: false
  tracing: false
  metrics: false
  validation: false
  dashboard: false

nameOverride: ""
fullnameOverride: ""

# If any of the pvc's defined below should be used as existingClaim for
# veidemann-contentwriter, veidemann-contentexplorer or veidemann-warcvalidator
# set their existingClaim value to the sentinel value "veidemann".
persistence:
  warcs:
    enabled: true
    accessMode: ReadWriteMany
    size: 1Gi
    ## Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: ""

    # Annotations for the Persistent Volume Claim
    annotations: {}
    # helm.sh/resource-policy: keep

  invalidwarcs:
    enabled: false
    accessMode: ReadWriteOnce
    size: 1Gi
    ## Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: ""

    # Annotations for the Persistent Volume Claim
    annotations: {}
    # helm.sh/resource-policy: keep

  validwarcs:
    enabled: false
    accessMode: ReadWriteOnce
    size: 1Gi
    ## Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: ""

    # Annotations for the Persistent Volume Claim
    annotations: {}
    # helm.sh/resource-policy: keep

  delivery:
    enabled: false
    accessMode: ReadWriteOnce
    size: 1Gi
    ## Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: ""

    # Annotations for the Persistent Volume Claim
    annotations: {}
    # helm.sh/resource-policy: keep

tls:
  create: false
  key: ""
  crt: ""

# default config values as used by configmap/secrets
default:
  controller:
    host: "veidemann-controller"
    port: "7700"

  frontier:
    host: "veidemann-frontier"
    port: "7700"

  harvester:
    host: "veidemann-harvester"
    port: "8080"

  contentWriter:
    host: "veidemann-contentwriter"
    port: "8082"

  dnsResolver:
    host: "veidemann-dns-resolver"
    port: "8053"

  robotsEvaluator:
    host: "veidemann-robotsevaluator-service"
    port: "7053"

  cache:
    host: "veidemann-cache-balancer"
    port: "3128"

  oosHandler:
    host: "veidemann-ooshandler"
    port: "50052"

  rethinkdb:
    user: "admin"
    password: "rethinkdb"

  log4j2:
    xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <Configuration status="WARN" monitorInterval="0">
          <Appenders>
              <Console name="Console" target="SYSTEM_OUT">
                  <PatternLayout
                          pattern="%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ} [%thread] %-5level %logger{36} - %MDC %msg %ex{full}%n"/>
              </Console>
          </Appenders>
          <Loggers>
              <Logger name="no.nb.nna.veidemann" level="info" additivity="false">
                  <AppenderRef ref="Console"/>
              </Logger>
              <Root level="error">
                  <AppenderRef ref="Console"/>
              </Root>
          </Loggers>
      </Configuration>

global:
  veidemann:
    rethinkdb:
      host: $(NODE_NAME)
      port: 28015
      name: "veidemann"

    jaeger:
      agent:
        host: "localhost"
        port: "6831"
      sampler:
        type: "const"
        param: "1"

# config values overrides default values
config:
  controller:
    host: ""
    port: ""

  frontier:
    host: ""
    port: ""

  harvester:
    host: ""
    port: ""

  contentWriter:
    host: ""
    port: ""

  dnsResolver:
    host: ""
    port: ""

  robotsEvaluator:
    host: ""
    port: ""

  cache:
    host: ""
    port: ""

  oosHandler:
    host: ""
    port: ""

  rethinkdb:
    user: ""
    password: ""

  log4j2:
    xml: ""

veidemann-db-initializer:
  annotations:
    "helm.sh/hook": "post-install,pre-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"

veidemann-contentwriter:
  persistence:
    enabled: true
    existingClaim: "warcs"

veidemann-contentexplorer:
  persistence:
    enabled: true
    existingClaim: "warcs"

veidemann-warcvalidator:
  persistence:
    warcs:
      enabled: true
      existingClaim: "warcs"

veidemann-cache:
  cache:
    dnsServers: "veidemann-dns-resolver"

rethinkdb:
  cluster:
    replicas: 1

dex:
  ingress:
    path: /dex
  config:
    storage:
      type: kubernetes
      config:
        inCluster: true
    logger:
      level: "debug"
      format: "text"
    oauth2:
      skipApprovalScreen: true
      responseTypes: ["code", "token", "id_token"]

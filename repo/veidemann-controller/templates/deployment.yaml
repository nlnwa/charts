{{- $global := .Values.global.veidemann -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "veidemann-controller.fullname" . }}
  labels:
    app: veidemann
    component: {{ template "veidemann-controller.name" . }}
    chart: {{ template "veidemann-controller.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      component: {{ template "veidemann-controller.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: veidemann
        component: {{ template "veidemann-controller.name" . }}
        release: {{ .Release.Name }}
    spec:
      volumes:
        - name: log4j-config
          configMap:
            name: {{ template "veidemann-controller.configPrefix" . }}
            items:
              - key: log4j2.xml
                path: log4j2.xml
      {{- if .Values.trustedCA.enabled }}
        - name: ca
          secret:
            secretName: {{ default (include "veidemann-controller.fullname" .) .Values.trustedCA.secretName }}
            items:
              - key: tls.crt
                path: tls.crt
      {{- end }}
    {{- if .Values.hostAliases }}
      hostAliases:
{{ toYaml .Values.hostAliases | indent 8 }}
    {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ default .Chart.AppVersion .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: grpc
              containerPort: {{ .Values.service.port }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          envFrom:
            - configMapRef:
                name: {{ template "veidemann-controller.configPrefix" . }}-rethinkdb-env
                optional: false
            - secretRef:
                name: {{ template "veidemann-controller.configPrefix" . }}-rethinkdb-env
                optional: false
          {{- if not .Values.global.veidemann.jaeger }}
            - configMapRef:
                name: {{ template "veidemann-controller.configPrefix" . }}-jaeger-env
                optional: true
          {{- end }}
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: API_PORT
              value: {{ .Values.service.port | quote }}
            - name: FRONTIER_HOST
            {{- if or .Values.config.frontier.host $global.mesh.host }}
              value: {{ default .Values.config.frontier.host $global.mesh.host | quote }}
            {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: {{ template "veidemann-controller.configPrefix" . }}
                  key: frontier.host
            {{- end }}
            - name: FRONTIER_PORT
            {{- if or .Values.config.frontier.port $global.mesh.port }}
              value: {{ default .Values.config.frontier.port $global.mesh.port | quote }}
            {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: {{ template "veidemann-controller.configPrefix" . }}
                  key: frontier.port
            {{- end }}
            - name: OPENID_CONNECT_ISSUER
            {{- if .Values.config.issuer }}
              value: {{ .Values.config.issuer | quote }}
            {{- end }}
          {{- with .Values.global.veidemann.jaeger }}
            - name: JAEGER_AGENT_HOST
              value: {{ .agent.host | quote }}
            - name: JAEGER_AGENT_PORT
              value: {{ .agent.port | quote }}
            - name: JAEGER_SAMPLER_TYPE
              value: {{ .sampler.type | quote }}
            - name: JAEGER_SAMPLER_PARAM
              value: {{ .sampler.param | quote }}
          {{- end }}
          volumeMounts:
            - name: log4j-config
              mountPath: /veidemann/config/log4j2.xml
              subPath: log4j2.xml
          {{- if .Values.trustedCA.enabled }}
            - name: ca
              mountPath: /veidemann/trustedca/tls.crt
              subPath: tls.crt
          {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

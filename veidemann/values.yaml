# Default values for veidemann.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Provisioning (see requirements.yaml)
provision:
  # linkerd
  linkerd: true
  # namerd
  namerd: true
  # single rethinkdb
  single-db: true
  # clustered rethinkdb
  clustered-db: false
  # jaeger
  tracing: false
  # dex
  auth: true


###########
# Anchors #
###########

# OpenId Connect issuer
anchor_issuer: &issuer https://veidemann.local/dex
anchor_hostname: &hostname veidemann.local
anchor_cert_name: &cert-name ingress-tls-cert
anchor_ca_cert_name: &ca-cert-name ingress-tls-ca-cert

# Linkerd
anchor_linkerd: &linkerd
  host: $(NODE_NAME)
  port: 4140

# Jaeger
anchor_jaeger: &jaeger
  jaeger:
    agent:
      host: $(NODE_NAME)
      port: 5775
    sampler:
      type: probabilistic
      # Jaeger default is: jaeger.sampler.param: "0.001"
      param: 0.5

# Rethinkdb
anchor_rethinkdb: &rethinkdb
  db:
    host: dev-rethinkdb-single
    port: 28015
    secretName: dev-veidemann


# Ingress
anchor_ingress: &ingress
  enabled: true
  hosts:
    - *hostname
  tls:
    - secretName: *cert-name
      hosts:
        - *hostname

# Persistent volume claim names (the claim names are prefixed: [release]-veidemann-[name])

# Warcs PVC
anchor_warcs_pvc: &persistence-warcs
  warcs:
    name: dev-veidemann-warcs
    enabled: true

# Valid warcs PCV
anchor_validwarcs_pvc: &persistence-validwarcs
  validwarcs:
    name: dev-veidemann-validwarcs
    enabled: true

# Invalid warcs PCV
anchor_invalidwarcs_pvc: &persistence-invalidwarcs
  invalidwarcs:
    name: dev-veidemann-invalidwarcs
    enabled: true

# Delivery PCV
anchor_delivery_pvc: &persistence-delivery
  delivery:
    name: dev-veidemann-delivery
    enabled: true

###############
# Persistence #
###############

persistence:
  warcs:
    enabled: true
    accessMode: ReadWriteOnce
    size: 1Gi
    annotations: {}
    existingClaim: false

  invalidwarcs:
    enabled: true
    accessMode: ReadWriteOnce
    size: 1Gi
    annotations: {}
    existingClaim: false

  validwarcs:
    enabled: true
    accessMode: ReadWriteOnce
    size: 1Gi
    annotations: {}
    existingClaim: false

  delivery:
    enabled: true
    accessMode: ReadWriteOnce
    size: 1Gi
    annotations: {}
    existingClaim: false

##########################
# ConfigMaps and Secrets #
##########################

# Secret values to put in configmap
config:
  log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="WARN" monitorInterval="0">
        <Appenders>
            <Console name="Console" target="SYSTEM_OUT">
                <PatternLayout pattern="%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ} [%thread] %-5level %logger{36} - %MDC %msg %ex{full}%n"/>
            </Console>
        </Appenders>
        <Loggers>
            <Logger name="no.nb.nna.veidemann" level="info" additivity="false">
                <AppenderRef ref="Console"/>
            </Logger>
            <Root level="error">
                <AppenderRef ref="Console"/>
            </Root>
        </Loggers>
    </Configuration>

secrets:
  username: admin
  password: ""

# Self signed certificates (server and ca)
tls:
  create: true
  name: *cert-name
  crt: |-
    -----BEGIN CERTIFICATE-----
    MIIC6zCCAdOgAwIBAgIJAJ9FVYbTjXzBMA0GCSqGSIb3DQEBCwUAMCUxCzAJBgNV
    BAYTAk5PMRYwFAYDVQQDDA1GYWtlQXV0aG9yaXR5MB4XDTE4MDMxODIyNTE1NFoX
    DTE5MDMxODIyNTE1NFowGjEYMBYGA1UEAwwPdmVpZGVtYW5uLmxvY2FsMIIBIjAN
    BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn7TJQJTFw2hpX+FcNAr8lAxKqioq
    Ivmwik0WYHDjDGvogGDe7IxBPTMDzZMxF+7GzQA5+6yMrfEHI4C9aGPqzggEYG7Q
    XAR7pFEv+gHJBABT4jjNn3PwLfGhvHDR3glEWRPYEuGFMg3PoWtv0xaemqch8IOF
    Yrw5p3OFq4LdZt6jvc2SFPtedvgQzqNCGlINEcZXasmLGpreTCbqtDoaTqOjSNlj
    EukonEENJl4QwWv2HIzIuAehJqwBRQSIOll82u6W7+unYDblDLvRxMNdmWrNSdjr
    dWzC8Gp0lFYdr+QQAUGF8Enpf2iZB74JrNrgvSI4KCiYcODa0LgOPt827QIDAQAB
    oykwJzAlBgNVHREEHjAcgg92ZWlkZW1hbm4ubG9jYWyCCWxvY2FsaG9zdDANBgkq
    hkiG9w0BAQsFAAOCAQEAH3lvMm2F6irNVQ7oxZe56E05lQIiibvklkUP6Tm/gF2J
    EFB5hj0NwSQj4BL1rZH47hYo1lXrtRFae8pKLGN6etYnaJNScnAL1iSHh60g6ZXv
    OoKaX/CgK58783wVbCoW9cNEclUW4Gm/tJCv+5BflHS3/ZSHlPvrEytoeYiZ6/X2
    AyuoYwpLbI2B0iiy/9vTT8+RRodn8ijxkMFZgvvFQMXbP5ogjIep9DVYOJdbJuh0
    R2FVwFvpnt1ToN5R5sJnRjDKEh4DGUSjNmI/a/tgIKQvHCyV//j4OpsPMaNYu7sN
    dSCz/9E2URKN07FAOpkwF3pPTBjAiBmeCZA+SMmIKQ==
    -----END CERTIFICATE-----
  key: |-
    -----BEGIN PRIVATE KEY-----
    MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQCftMlAlMXDaGlf
    4Vw0CvyUDEqqKioi+bCKTRZgcOMMa+iAYN7sjEE9MwPNkzEX7sbNADn7rIyt8Qcj
    gL1oY+rOCARgbtBcBHukUS/6AckEAFPiOM2fc/At8aG8cNHeCURZE9gS4YUyDc+h
    a2/TFp6apyHwg4VivDmnc4Wrgt1m3qO9zZIU+152+BDOo0IaUg0RxldqyYsamt5M
    Juq0OhpOo6NI2WMS6SicQQ0mXhDBa/YcjMi4B6EmrAFFBIg6WXza7pbv66dgNuUM
    u9HEw12Zas1J2Ot1bMLwanSUVh2v5BABQYXwSel/aJkHvgms2uC9IjgoKJhw4NrQ
    uA4+3zbtAgMBAAECggEATjlaqcs04nVtx4y2gLcw58Ltf1OPt/ncwqDnaO1iCF+C
    Tf8ksXAxNCycnECQN0y5CwglXmQxs7Du8jDIlSz7gVbj7efZHnkDpoQtn6LoNpGC
    hLeV35gF+Dr2ITqRUNPxKkBSAU180/t3y3S4HQhjPxTFxuxklOvkwWQQAOXkU9HK
    73w5duNP75um7vis0jIStZH2dueRNoHdWFD9adxeLB7fTAAuNBnv4gIHT2W+cfZe
    lmsBvEIsReqsMlV0eW8mjokIn2YgrHeDkCadWVKI+dBBVr4vJQTf6NqLEjcIeoRI
    8FWpSnJzrzlncNGiQN81dSDZBp+UWus7H/tI1emYAQKBgQDQTa/6Wf3c+SF4anjM
    7S3Aa/YgXhE37Gd3RW5oZcCGtQIObqcecpwoKvrVkhuyYI37747nZfiyv34pNwAO
    j7a/pkY3D5UVyNirxUXEy4dfGZWHMHKnfBosi1Rv/OSXdWgULcAQxUb/DiaLujy1
    LZD/AiwljS/zVI6cfJclDYsogQKBgQDERm23/R0IX+tHP3OjgS0QlQ9w8RwsBbHb
    QOuRTxEaT62MeLaSrxn2G3J79kfPFaPBOje21c6uBwo58uOYdY57gm8WmQ0JtQiq
    uCXHDHBzqpoCgqyfX+nycgSZ2NqtnOwucnG3xmZdLKnl64fghQTc4PfPXRya0Z0x
    YiU+KmL4bQKBgQCM0Pf2Nn/3sjN+Q/wGDRCw1Es+9liNhbMsXjOVP7Q3XIZXW1Z+
    rtwCC4wmdO9kVwGlHv1sUPMfY3TWR+gx79WLGcy9zDrszyoqdOIFd9G76H+9NHNN
    5geLtWUPj9a4zRXfDk6ZB8RHCDnmm7AOiw9KVR2jBR81UCRYhaFn2xAIAQKBgQCq
    fT7LBfsVDjSR4+TvzsI1WDVcdqNw/dVbTU4SH2sMvs9SaHy2d5EGfRr54JjJodNn
    gclpcNkhw423fmsCQILueANEztdLakxH9sMh3oVDg5pZueZ2XdsaNL4YYQy6p8dk
    JRbwek7qemRuCiQx+3mY33WCUzAIrzFq9wTAthLYFQKBgQCpPkDylkkIpPjuj3e/
    RMhA2bzn6A7VusLWYfINy6lggNV7SfAU16YkCI3XVDf+nIYI9iCTbezW9JA8euAa
    H4aKzLP0AvyeF08kmN4tqUUfhNITH8T+8e9v5rORcBneWNcjSIjwBs/bRwua3GfM
    xRdp7Lb+b+f5szoX0mOTF75OBA==
    -----END PRIVATE KEY-----

ca:
  create: true
  name: *ca-cert-name
  crt: |-
    -----BEGIN CERTIFICATE-----
    MIIDHTCCAgWgAwIBAgIJAJVjIW/pbBZ4MA0GCSqGSIb3DQEBCwUAMCUxCzAJBgNV
    BAYTAk5PMRYwFAYDVQQDDA1GYWtlQXV0aG9yaXR5MB4XDTE4MDMxODIyNTE1NFoX
    DTE5MDMxODIyNTE1NFowJTELMAkGA1UEBhMCTk8xFjAUBgNVBAMMDUZha2VBdXRo
    b3JpdHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC8olzQxuF8POzS
    0VWHXehDPJYGQv8QLAhlwi0zaThyLFiYYj7LQbVwgFFpMMjSPa4L9hcLKWAfKVzw
    tr9QSZQzDZhfrdFQ0dMKIQ/Lc12mKH6mmVKmXJZHrR0KO2vrTBUjthV04T5HrPmi
    jBAHlm9oI7HizDULnCKyqnjU88OVF7CkJwo6N1G9gqSOvvZ3ZMU6N/H1EoyGQHhX
    zI/GXApz6V/7dmhS/ljxZSBmIdcfzw1PAwjn+Xw+/t1ojDUce5cZDWHtl6wMlefy
    pw1xdDKoQmJdNzBZLh7YGyeAWF8VFS6j1bjcXQuocDSak+ZvTyIamDTZt86fE3j0
    j3TTk8SfAgMBAAGjUDBOMB0GA1UdDgQWBBQUiO1PQUHU07EPUSVjidQtjfH4IzAf
    BgNVHSMEGDAWgBQUiO1PQUHU07EPUSVjidQtjfH4IzAMBgNVHRMEBTADAQH/MA0G
    CSqGSIb3DQEBCwUAA4IBAQA/p34C8+HPNBe5gudwHHQEKVDMC/AaC4+SRCKvb4Yr
    OD/e0uULzHNXHzt7b8x/baybFD4QW4jHFglTxenrlpuv0B2pdp69lS8/2DLpxYbf
    J3c600If+fJbly0ETKD3qpIEGH2pRsxIULLbelZk7z6jPGFOB+NJ0lBUkmXv56cw
    8SzvkImhGnAQanSEJE4ijT++5nII2pZA1Waz087oon9O6zX+6taa2HY+vtODu+A7
    1zkYRSnK0URZKt6BQIx0b9HvCoxVYcVwJj7FnWshl7+JTgMUg4yV+Gd3nTBecE+C
    jjArumM6YYcm24CHCrHYpxyWAKP1TgoCleuXmHa63ko5
    -----END CERTIFICATE-----
  # The key is only provided for completeness (veidemann-controller only uses the cert)
  key: |-
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpAIBAAKCAQEAvKJc0MbhfDzs0tFVh13oQzyWBkL/ECwIZcItM2k4cixYmGI+
    y0G1cIBRaTDI0j2uC/YXCylgHylc8La/UEmUMw2YX63RUNHTCiEPy3Ndpih+pplS
    plyWR60dCjtr60wVI7YVdOE+R6z5oowQB5ZvaCOx4sw1C5wisqp41PPDlRewpCcK
    OjdRvYKkjr72d2TFOjfx9RKMhkB4V8yPxlwKc+lf+3ZoUv5Y8WUgZiHXH88NTwMI
    5/l8Pv7daIw1HHuXGQ1h7ZesDJXn8qcNcXQyqEJiXTcwWS4e2BsngFhfFRUuo9W4
    3F0LqHA0mpPmb08iGpg02bfOnxN49I9005PEnwIDAQABAoIBAAyYasol/XhmOQn6
    oFNhmdijewEACDf0OLtSs+Hy7Kny/Bdwt/CqeosAhm8XqtEe/TgfPnqoUJrEEEii
    azPZNeQSzFHXMVrMJ+NNQdi740zs90f4hORG2mH+1SmRvir/8Ylo5xXe1GHE0wZf
    g9J94QJ7H62dJQ2ZZ1e2ukq93BlgViqw0Zam9QgO0ULDJ+SppDWS9DxasSdQ5TvQ
    Yb4UPgs5nbpDnpU3zu8LbdU1Bkub13TXVJzIwEiNHDe9rYmAWM0FfdroH9AcW8BW
    cYt9FxDgo3s7TApnbzYV3oNJdD2CUoZ4c9IQePPQzFNcL2zmIv5Niusc2A86HlQ/
    vrYRicECgYEA6m11AOScJv7KgZVjupe+7TbH+J5efR6zoVMVzUnhmbjWI1ZEE0vl
    uk1MrwUuxLbchh/bmdVpxwdz/AoyDNgIrNZDK3FCmN9BK+Sa4uY12vhPqMRRWS+5
    5AWadnnZQ/3ZZ6Ys/B3v6lroclarua+EdifbykQGF2bnK5NFv+KEoYMCgYEAzf4g
    PGDObqnm3DZoLsewjpUJX99smdEzLzJAB1+UaFZ5NO4gf5FAoBy0AQUNix5owS1a
    XJRahs7cgKzd05snbmSWGIKI3Ves9kfzuDyyuhZ1gxT9wF0zFQ8L44Cl+mQSH2XZ
    vnf5WxW8KtsLHMYEtfwQlhIyszy5yI+7uje2sbUCgYEAtq+V/pwpFDp6lYFVtpOK
    tlF6hMTl3ZuPYKje1Jw+swzX07HmWyNKY2TZ3YqsZ6AZOmyZNciaJgAo4sEPP/Ma
    z5YpwjEBNSDGKO59xVSho4LekSZsPpRyyL+VH77VEadBRQS7Cb5KuNcfTfs81/dv
    wqRNI9Le7F3EyLB8KozbzwECgYAvl/WOvbc0bmD+pDtyA4VRjDG8SvzmlSVEVFHi
    4jyB1ujuR86OatsJo1gbnDVC3WXKrFXiagx4dTcRK9+c0o5LvUXIp/BDY8x8oqc2
    /B83S5UfEiyG04HH7dALYl/2+EQPqRKkJUghuWXeaPmqTj4sZe7XHaFFNFSgeEUh
    g1ncuQKBgQCaB4K4Estq51gw2Fjoh1TcoHqkD6ELKLOjYJ00ZPRJF+YItDEojtOV
    iRHfuzD3vxKGbHg4JaW4Wyq3nkTO5X/YUuxBJSPSNUb1mIhTzvce6ZK73O058Wu4
    rHSmsltMZnMQiHiy92UrPYfELhMmjg5QkCBgvk3i18hmww+cj+kB+g==
    -----END RSA PRIVATE KEY-----

#############
# Subcharts #
#############

# Begin: veidemann-robots
veidemann-robots:
  config:
    <<: *jaeger
    <<: *rethinkdb
# End: veidemann-robots

# Begin: veidemann-initdb
veidemann-initdb:
  config:
    <<: *rethinkdb
# End: veidemann-initdb

# Begin: veidemann-harvester
veidemann-harvester:
  config:
    <<: *jaeger
    <<: *rethinkdb
    contentWriter:
      <<: *linkerd
    dnsResolver:
      <<: *linkerd
# End: veidemann-harvester

# Begin: veidemann-frontier
veidemann-frontier:
  config:
    <<: *jaeger
    <<: *rethinkdb
    harvester:
      <<: *linkerd
    robotsEvaluator:
      <<: *linkerd
    dnsResolver:
      <<: *linkerd
# End: veidemann-frontier

# Begin: veidemann-dnsresolver
veidemann-dnsresolver:
  config:
    <<: *jaeger
    <<: *rethinkdb
    contentWriter:
      <<: *linkerd
# End: veidemann-dnsresolver

# Begin: veidemann-warcvalidator
veidemann-warcvalidator:
  persistence:
    <<: *persistence-warcs
    <<: *persistence-validwarcs
    <<: *persistence-invalidwarcs
    <<: *persistence-delivery
  config:
    <<: *rethinkdb

# End: veidemann-warcvalidator

veidemann-warcvalidator-api:
  ingress:
    <<: *ingress
    annotations:
      kubernetes.io/ingress.class: "nginx"
  config:
    <<: *rethinkdb

# Begin: veidemann-contentwriter
veidemann-contentwriter:
  persistence:
    <<: *persistence-warcs
  config:
    <<: *jaeger
    <<: *rethinkdb
    warc:
      writer:
        poolSize: 6
      size: 100MiB
      compress: "true"
# End: veidemann-contentwriter

# Begin: veidemann-contentexplorer
veidemann-contentexplorer:
  ingress:
    <<: *ingress
    annotations:
      kubernetes.io/ingress.class: "nginx"
  config:
    <<: *rethinkdb
  persistence:
    <<: *persistence-warcs

# End: veidemann-contentexplorer

# Begin: veidemann-controller
veidemann-controller:
  ingress:
    <<: *ingress
    annotations:
      kubernetes.io/ingress.class: "linkerd"
  config:
    <<: *rethinkdb
    frontier:
      <<: *linkerd
    issuer: *issuer
    tls: true
    tlsSecretName: *ca-cert-name
# End: veidemann-controller

# Begin: veidemann-cache
veidemann-cache:
  config:
    dnsServers: "8.8.8.8 8.8.4.4"
# End: veidemann-cache

# Begin: veidemann-api-gateway
veidemann-api-gateway:
  ingress:
    <<: *ingress
    annotations:
      kubernetes.io/ingress.class: "nginx"
  config:
    controller:
      <<: *linkerd
# End: veidemann-api-gateway

# Begin: veidemann-admin
veidemann-admin:
  ingress:
    <<: *ingress
    annotations:
      kubernetes.io/ingress.class: "nginx"
  config:
    issuer: *issuer
# End: veidemann-admin

# Begin: Jaeger
jaeger:
  agent:
    daemonset:
      useHostPort: false
  cassandra:
    persistence:
      enabled: false
# End: Jaeger

# Begin: dex
dex:
  ingress:
    <<: *ingress
    annotations:
      kubernetes.io/ingress.class: "nginx"
  config:
    issuer: *issuer

    # The storage configuration determines where dex stores its state. Supported
    # options include SQL flavors and Kubernetes third party resources.
    #
    # See the storage document at Documentation/storage.md for further information.
    storage:
      type: kubernetes
      config:
        inCluster: true

    web:
      http: 0.0.0.0:5556
      allowedOrigins:
        - https://veidemann.local
        - https://localhost:4200
    # Options for controlling the logger.
    logger:
      level: "debug"
      format: "text" # can also be "json"

    # Control which response types dex supports.
    # Defaults to ["code"], the code flow.
    oauth2:
      skipApprovalScreen: true
      responseTypes: ["code", "token", "id_token"]

    # Instead of reading from an external storage, use this list of clients.
    #
    # If this option isn't chosen clients may be added through the gRPC API.
    staticClients:
      - id: veidemann-gui
        redirectURIs:
          - "https://veidemann.local/veidemann/activity"
          - "https://localhost:4200/activity" # Allow development with: ng serve --ssl 1 --ssl-key ... --ssl-cert ...
        name: "Veidemann Admin GUI"
        secret: ZXhhbXBsZS1hcHAtc2VjcmV0
      - id: veidemann-cli
        public: true
        name: "Veidemann CLI"
        secret: cli-app-secret
      - id: veidemann-api
        name: "Veidemann API"
        secret: VerySecret
        trustedPeers:
          - veidemann-cli
          - veidemann-gui

# End: dex

# Begin: rethinkdb-single
rethinkdb-single:
  resources:
    requests:
        memory: "500Mi"
# End: rethinkdb-single

# Begin: linkerd
linkerd:
  ports:
    - name: incoming
      containerPort: 4141
      hostPort: 4443
    - name: outgoing
      containerPort: 4140
      hostPort: 4140
    - name: admin
      containerPort: 9990
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 0
      memory: 512Mi
  tls:
    secretName: *cert-name
  config:
    admin:
      ip: 0.0.0.0
      port: 9990

    usage:
      orgId: nlnwa
      enabled: false

    routers:
    - protocol: h2
      label: ingress-grpc
      identifier:
        kind: io.l5d.ingress
        namespace: default
      interpreter:
        kind: io.l5d.mesh
        experimental: true
        dst: /$/inet/dev-namerd.default.svc.cluster.local/4321
        root: /ingress
      servers:
      - port: 4141
        ip: 0.0.0.0
        clearContext: true
        tls:
          certPath: /io.buoyant/linkerd/certs/tls.crt
          keyPath: /io.buoyant/linkerd/certs/tls.key

    - protocol: h2
      label: internal-grpc
      identifier:
        kind: io.l5d.header.path
        segments: 1
      interpreter:
        kind: io.l5d.mesh
        experimental: true
        dst: /$/inet/dev-namerd.default.svc.cluster.local/4321
        root: /grpc
      servers:
      - port: 4140
        ip: 0.0.0.0
# End: linkerd

# Begin: namerd
namerd:
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 0
      memory: 512Mi
  kubectl:
    resources:
      requests:
        cpu: 0
        memory: 32Mi
  # script to create initial namerd namespaces
  createNamespace: |-
    #!/bin/sh
    set -e
    if namerctl dtab get ingress > /dev/null 2>&1; then
      echo "ingress namespace already exists"
    else
      echo "
        # use the k8s namer for resolution
        /svc  => /#/io.l5d.k8s ;
      " | namerctl dtab create ingress -
    fi

    if namerctl dtab get grpc > /dev/null 2>&1; then
      echo "grpc namespace already exists"
    else
      echo "
        # Use the k8s namer for resolution
        /srv                                => /#/io.l5d.k8s/default ;
        /grpc                               => /srv/http ;

        # identifier: io.l5d.header.path (segments: 1)
        /svc/veidemann.api.Frontier         => /grpc/dev-veidemann-frontier ;
        /svc/veidemann.api.ContentWriter    => /grpc/dev-veidemann-contentwriter ;
        /svc/veidemann.api.Controller       => /grpc/dev-veidemann-controller ;
        /svc/veidemann.api.DnsResolver      => /grpc/dev-veidemann-dnsresolver ;
        /svc/veidemann.api.Harvester        => /grpc/dev-veidemann-harvester ;
        /svc/veidemann.api.RobotsEvaluator  => /grpc/dev-veidemann-robots ;
        /svc/veidemann.api.Status           => /grpc/dev-veidemann-controller ;
        /svc/veidemann.api.Report           => /grpc/dev-veidemann-controller ;
      " | namerctl dtab create grpc -
    fi
# End: namerd
